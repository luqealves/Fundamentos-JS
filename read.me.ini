Fundamentos de JavaScript

1. Introdu√ß√£o ao JavaScript
[x] O que √© JavaScript e para que serve
[x] Onde o JavaScript roda (navegador e Node.js)
[x] Como adicionar JavaScript em uma p√°gina HTML (<script>)
[x] Ferramentas essenciais: navegador (DevTools), VS Code

1. Tipos de Dados Primitivos

String: Exemplo de manipula√ß√£o e exibi√ß√£o de strings.
Number: Demonstra√ß√£o de n√∫meros e opera√ß√µes b√°sicas.
Boolean: Verifica√ß√£o de condi√ß√µes booleanas.
Null e Undefined: Explica√ß√£o e exemplos de vari√°veis n√£o inicializadas ou com valor null.

2. Coer√ß√£o de Tipos
Coer√ß√£o Impl√≠cita: Exemplos de como o JavaScript converte tipos automaticamente.
Coer√ß√£o Expl√≠cita: Convers√£o manual de tipos usando String() e Number().

3. Declara√ß√£o de Vari√°veis
let: Usado para vari√°veis que podem mudar de valor.
const: Usado para constantes que n√£o podem ser reatribu√≠das.
var: Demonstra√ß√£o do escopo global ou de fun√ß√£o.

4. Estruturas de Controle
Condicional if/else: Verifica√ß√£o de valores e tratamento de erros.

5. Opera√ß√µes Matem√°ticas e Contadores
Demonstra√ß√£o de incremento e decremento.



2. Fundamentos da Linguagem
[x] Tipos de dados primitivos (string, number, boolean, etc.)
[x] Declara√ß√£o de vari√°veis: var, let, const
[x] Operadores: aritm√©ticos, compara√ß√£o, l√≥gicos
[x] Operadores de atribui√ß√£o (=, +=, -=, etc.)
[x] Coer√ß√£o de tipos (impl√≠cita e expl√≠cita)
[] Coment√°rios em JavaScript (// e /* */)
[] Sintaxe e instru√ß√µes b√°sicas

## üîπ M√©todos do Number

| M√©todo | O que faz | Exemplo | Sa√≠da |
|--------|-----------|---------|-------|
| **toFixed(n)** | Formata com `n` casas decimais | `(10.456).toFixed(2)` | `"10.46"` |
| **toPrecision(n)** | Define d√≠gitos significativos | `(10.456).toPrecision(3)` | `"10.5"` |
| **toExponential(n)** | Nota√ß√£o cient√≠fica | `(1234).toExponential(2)` | `"1.23e+3"` |
| **toLocaleString()** | Formata conforme localidade | `(1234.56).toLocaleString("pt-BR", { style: "currency", currency: "BRL" })` | `"R$ 1.234,56"` |
| **toString([radix])** | Converte p/ string em base escolhida | `(255).toString(16)` ‚Üí `"ff"`<br>`(255).toString(2)` ‚Üí `"11111111"` |
| **valueOf()** | Retorna valor primitivo | `(new Number(10)).valueOf()` | `10` |

---

## üîπ Tipos Primitivos e M√©todos √öteis

| Tipo | Exemplos | M√©todos mais usados | Exemplo de uso | Sa√≠da |
|------|-----------|----------------------|----------------|-------|
| **String** | `"Ol√°"`, `'JS'`, `` `template` `` | `.length`, `.toUpperCase()`, `.toLowerCase()`, `.includes()`, `.replace()`, `.split()` | `"JavaScript".includes("Script")` | `true` |
| **Number** | `10`, `3.14`, `-7` | `.toFixed()`, `.toPrecision()`, `.toString()` | `(255).toString(16)` | `"ff"` |
| **Boolean** | `true`, `false` | Usado em condi√ß√µes | `Boolean(0)` | `false` |
| **Undefined** | `let x;` | N√£o possui m√©todos | - | - |
| **Null** | `let y = null;` | N√£o possui m√©todos | - | - |
| **Symbol** | `Symbol("id")` | Identificadores √∫nicos | `Symbol("a") === Symbol("a")` | `false` |
| **BigInt** | `123n` | N√∫meros grandes | `9007199254740991n + 2n` | `9007199254740993n` |

---

## üîπ Objetos Globais √öteis

| Objeto | Uso | Exemplo |
|--------|-----|---------|
| **Math** | Fun√ß√µes matem√°ticas | `Math.random()`, `Math.floor(3.9)` ‚Üí `3` |
| **Date** | Datas e horas | `new Date().getFullYear()` |
| **JSON** | Trabalhar com objetos e strings | `JSON.stringify({a:1})` ‚Üí `'{"a":1}'` |

---

## üîπ Operadores em JavaScript

### ‚ûï Aritm√©ticos
let a = 10, b = 3;
console.log(a + b); // 13 (soma)
console.log(a - b); // 7  (subtra√ß√£o)
console.log(a * b); // 30 (multiplica√ß√£o)
console.log(a / b); // 3.333... (divis√£o)
console.log(a % b); // 1  (resto da divis√£o)
console.log(a ** b); // 1000 (potencia√ß√£o)

‚öñÔ∏è Compara√ß√£o
console.log(5 == "5");  // true  (igualdade solta, compara s√≥ o valor)
console.log(5 === "5"); // false (igualdade estrita, compara valor e tipo)
console.log(5 != "5");  // false
console.log(5 !== "5"); // true
console.log(10 > 5);    // true
console.log(10 >= 10);  // true
console.log(5 < 2);     // false

üîÄ L√≥gicos
console.log(true && false); // false (E l√≥gico)
console.log(true || false); // true  (OU l√≥gico)
console.log(!true);         // false (nega√ß√£o)

üìù Atribui√ß√£o
let x = 10;
x += 5; // x = x + 5 ‚Üí 15
x -= 3; // x = x - 3 ‚Üí 12
x *= 2; // x = x * 2 ‚Üí 24
x /= 4; // x = x / 4 ‚Üí 6
x %= 5; // x = x % 5 ‚Üí 1


3. Controle de Fluxo
[x] Estruturas condicionais: if, else, else if
[x] switch
[x] Operador tern√°rio
[x] Introdu√ß√£o ao tratamento de erro: try...catch
[x] Modo estrito ("use strict")

4. Estruturas de Repeti√ß√£o
[x] for
[x] while e do...while
[] for...of e for...in
[] break e continue

5. Fun√ß√µes
[] Declara√ß√£o de fun√ß√µes
[] Express√µes de fun√ß√£o
[] arrow functions (fun√ß√µes de seta)
[] Par√¢metros e retornos
[] Escopo : global, legal e de bloco
[] hoisting (eleva√ß√£o de vari√°veis e fun√ß√µes)

6. Objetos e Arrays
[] Criando e manipulando arrays
[] Acessando propriedades e m√©todos
[] Arrays: cria√ß√£o e manipula√ß√£o
[] M√©todos de array (push, pop, map, filter, reduce, etc.)
[] Itera√ß√£o em arrays (forEach, for...of)
[] Desestrutura√ß√£o de objetos e arrays
[] Operador spread/rest

7. Conceitos importantes
[] valor vs refer√™ncia
[]thuthy e falsy
[] Desestrutura√ß√£o de arrays e objetos
[] Operador spread/rest

8. DOM ( document object model)
[] Introdu√ß√£o ao DOM
[] Selecionando elementos (getElementById, querySelector)
[] Manipulando conte√∫do (innerText, innerHTML)
[] Criando e removendo elementos
[] Manipulando atributos e estilos
[] Eventos (addEventListener)
[] Ciclo de vida do DOM
[] Objeto Date e m√©todos principais
[] Set e Map
[] Booleanos e compara√ß√µes

9. Express√µes Avan√ßadas
[] Operadores bit a bit
[] Express√µes regulares (RegExp)
[] Convers√£o de tipos (Number(), String(), Boolean())
[] Palavra-chave typeof

10. Programa√ß√£o Orientada a Objetos
[] Classes e construtores
[] Heran√ßa
[] M√©todos est√°ticos
[] Encapsulamento b√°sico

11. M√≥dulos e JSON
[] Importa√ß√£o e exporta√ß√£o de m√≥dulos (import / export)
[] Trabalhando com JSON (JSON.stringify, JSON.parse)

12. Debug e Boas Pr√°ticas
[] Uso do console (log, error, table)
[] Depura√ß√£o com DevTools
[] Melhores pr√°ticas de escrita de c√≥digo
[] Performance no JavaScript

13. DOM e Navegador
[] Selecionando elementos (getElementById, querySelector)
[] Manipulando conte√∫do (innerText, innerHTML)
[] Criando e removendo elementos
[] Manipulando atributos e estilos
[] Eventos (addEventListener)
[] Ciclo de vida do DOM

14. APIs e Requisi√ß√µes
[] fetch e Promises
[] Async/Await
[] Introdu√ß√£o ao AJAX
[] Consumindo APIs REST
[] Diferen√ßa entre JavaScript e jQuery

15. Recursos Extras
[] Introdu√ß√£o ao Canvas e gr√°ficos em JS
[] Introdu√ß√£o √†s Web APIs (Geolocation, LocalStorage, etc.)
[] Vers√µes do JavaScript (ES5, ES6+)